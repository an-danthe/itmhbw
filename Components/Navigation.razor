@typeparam TItem

<ul class="pager-items">
    @for (int i = 0; i < Items.Count; i++)
    {
        int index = i;

        <li>
            @if (index == _currentIndex)
            {
                <span class="pager-item active">@Items[index]</span>
            }
            else
            {
                <span class="pager-item" @onclick="@(e => OnClick(index))">@Items[index]</span>
            }
        </li>
    }
</ul>

@code
{
    [Parameter]
    public Action<TItem> OnItemChanged { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items { get; set;}

    public TItem Current => Items[_currentIndex];

    public void OnClick(int itemIndex)
    {
        if (itemIndex >= 0 && itemIndex < Items.Count)
        {
            _currentIndex = itemIndex;

            OnItemChanged.Invoke(Current);
        }
    }

    public void Next()
    {
        if (_currentIndex >= Items.Count - 1)
            return;
            
        _currentIndex++;

        OnItemChanged.Invoke(Current);
    }

    public void Previous()
    {
        if (_currentIndex <= 0)
            return;

        _currentIndex--;

        OnItemChanged.Invoke(Current);
    }

    private int _currentIndex;

    protected override void OnInitialized()
    {
        if (Items.Count == 0)
            throw new InvalidOperationException("Items length is 0");

        _currentIndex = 0;
    }
}